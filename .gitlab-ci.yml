---

services:
  - name: postgis/postgis:14-3.3-alpine
    alias: postgres

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  SQLALCHEMY_SILENCE_UBER_WARNING: 1
  POSTGRES_HOST: postgres
  POSTGRES_DB: test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  APP_DB_DSN: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB"

cache:
  paths:
    - .cache/pip  # for pipx/pip
    - .venv/   # for project dependencies

image:
  name: python:3.8

stages:
  - ðŸ§ª test

test:
  stage: ðŸ§ª test
  before_script:
    # best practice way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - export PATH="/root/.local/bin:$PATH"
    - python --version
    - python -m pip install --upgrade pip
    - python -m pip install pipx
    - python -m pipx install poetry==1.3.2
    - poetry --version
    - poetry check
    - poetry config virtualenvs.in-project true
    - poetry install --no-interaction --no-ansi --no-root
    - echo "$CI_PROJECT_DIR/src" > .venv/lib/python3.8/site-packages/coke.pth
    - apt-get update
    - apt-get install -y postgresql-client
    - psql -h $POSTGRES_HOST -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - psql -h $POSTGRES_HOST -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "DROP EXTENSION IF EXISTS postgis_tiger_geocoder;"
    - psql -h $POSTGRES_HOST -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "DROP EXTENSION IF EXISTS postgis_topology;"
  script:
    - poetry run python -m coke.config
    - poetry run pytest
